/*************************************************** 
  This is a library for the HDC1000 Humidity & Temp Sensor

  Designed specifically to work with the HDC1000 sensor from Adafruit
  ----> https://www.adafruit.com/products/2635

  These sensors use I2C to communicate, 2 pins are required to  
  interface
  Adafruit invests time and resources providing this open source code, 
  please support Adafruit and open-source hardware by purchasing 
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.  
  BSD license, all text above must be included in any redistribution
 ****************************************************/

#include "Adafruit_HDC1000.h"
#if defined(__AVR__)
  #include <util/delay.h>
#endif

Adafruit_HDC1000::Adafruit_HDC1000() {

	setSensor();
}


bool Adafruit_HDC1000::begin(uint8_t a) {
  
  
  if(a != 0) // this is a hack lets see if we can override defualt parameters
{
	
  _i2caddr = a;
}
else
{
	_i2caddr = HDC1000_I2CADDR;
}  

  //Wire.begin();
  
  reset();
  if (read16(HDC1000_MANUFID) != 0x5449) 
  	{
  		return false;
  	}
  if (read16(HDC1000_DEVICEID) != 0x1000)
  {
  		return false;
  } 
  
  return true;
}

void Adafruit_HDC1000::reset(void) {
  // reset, and select 14 bit temp & humidity
  uint16_t config = HDC1000_CONFIG_RST | HDC1000_CONFIG_MODE | HDC1000_CONFIG_TRES_14 | HDC1000_CONFIG_HRES_14;

  Wire.beginTransmission(_i2caddr);
  Wire.write(config>>8);
  Wire.write(config&0xFF);
  Wire.endTransmission();
  delay(15);
}


float Adafruit_HDC1000::readTemperature(void) {
  
  float temp = (read32(HDC1000_TEMP, 20) >> 16);
  temp /= 65536;
  temp *= 165;
  temp -= 40;

  return temp;
}
  

float Adafruit_HDC1000::readHumidity(void) {

  float hum = (read32(HDC1000_TEMP, 20) & 0xFFFF);

  hum /= 65536;
  hum *= 100;

  return hum;
}

/*********************************************************************/

uint16_t Adafruit_HDC1000::read16(uint8_t a, uint8_t d) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(a);
  Wire.endTransmission();
  delay(d);
  Wire.requestFrom((uint8_t)_i2caddr, (uint8_t)2);
  uint16_t r = Wire.read();
  r <<= 8;
  r |= Wire.read();
  //Serial.println(r, HEX);
  return r;
}

uint32_t Adafruit_HDC1000::read32(uint8_t a, uint8_t d) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(a);
  Wire.endTransmission();
  delay(50);
  Wire.requestFrom((uint8_t)_i2caddr, (uint8_t)4);
  uint32_t r = Wire.read();
  r <<= 8;
  r |= Wire.read();
  r <<= 8;
  r |= Wire.read();
  r <<= 8;
  r |= Wire.read();
  //Serial.println(r, HEX);
  return r;
}

void Adafruit_HDC1000::setSensor()
{
	 
	Sensor_Infomation.name = "HDC1000";     	  /**< sensor name */
    Sensor_Infomation.version = 1.0;          /**< version of the hardware + driver */
    Sensor_Infomation.sensor_id = 0;          /**< unique sensor identifier */
   // float    max_value;                       /**< maximum value of this sensor's value in SI units */
    //float    min_value;                       /**< minimum value of this sensor's value in SI units */
    //float    resolution;                      /**< smallest difference between two values reported by this sensor */
    //int32_t  min_delay;                       /**< min delay in microseconds between events. zero = not a constant rate */
	Sensor_Infomation.SupportedFunctions.push_back(SENSOR_TYPE_RELATIVE_HUMIDITY); 	 /**< Vector containing the supported functions of the sensor- functions from sensors_type_t */ 
	Sensor_Infomation.SupportedFunctions.push_back(SENSOR_TYPE_AMBIENT_TEMPERATURE);
}

sensor_t Adafruit_HDC1000::getSensor()
{
	return Sensor_Infomation;
}

float Adafruit_HDC1000::getValue(int Value_Type)
{
	switch (Value_Type)
	{
		case SENSOR_TYPE_RELATIVE_HUMIDITY:
		{			
			return readHumidity();
	  		break;
		}
		case SENSOR_TYPE_AMBIENT_TEMPERATURE:
		{
			return readTemperature();
			break;
		}
		default:
		{
			return NAN; // was -9999.99
			break;
		}
	}

}

std::unique_ptr<Sensor_Wrapper> Adafruit_HDC1000::clone()
{
	//unique_ptr<int> up1(new int);
	std::unique_ptr <Adafruit_HDC1000> return_ptr(new Adafruit_HDC1000(*this));
	//return std::unique_ptr <Adafruit_HDC1000>(*this);
	return std::move(return_ptr);
}

/*
 Sensor_Wrapper* Adafruit_HDC1000::clone()
 {
     return new Adafruit_HDC1000(*this);
 }
 */
